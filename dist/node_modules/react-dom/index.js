(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactDOM = factory(global.React));
})(this, (function (React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	const MutationMask = Placement | Update | ChildDeletion;

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	/**
	 * ReactElement如果作为核心模块操作的数据结构，存在的问题：
	    ♢ 无法表达节点之间的关系
	    ♢ 字段有限，不好拓展（比如：无法表达状态）
	    所以，需要一种新的数据结构，他的特点：
	    ♢ 介于ReactElement与真实UI节点之间
	    ♢ 能够表达节点之间的关系
	    ♢ 方便拓展（不仅作为数据存储单元，也能作为工作单元）
	    这就是FiberNode（虚拟DOM在React中的实现）
	 */
	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    memoizedProps;
	    memoizedState;
	    alternate; // 用于在current fiberNode树与workInProgress中切换
	    flags;
	    subtreeFlags;
	    deletions;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key;
	        // HostComponent <div> div DOM
	        this.stateNode = null;
	        // FunctionComponent () => {}
	        this.type = null;
	        // 构成树状结构
	        // 指向父fiberNode
	        this.return = null;
	        // 指向兄弟fiberNode
	        this.sibling = null;
	        this.child = null;
	        // <ul> li *3 <.ul>
	        this.index = 0;
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.memoizedState = null;
	        this.updateQueue = null;
	        this.alternate = null;
	        // 副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.deletions = null;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    // 双缓存机制
	    let wip = current.alternate;
	    if (wip === null) {
	        //mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        //update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	const createFiberFromElement = (element) => {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // <div/> type: 'div
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未实现的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	};

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	// 将Update插入到UpdateQueue
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	// 消费Update
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	const ChildReconciler = (shouldTrackEffects) => {
	    const deleteChild = (returnFiber, childToDelete) => {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    };
	    const deleteRemainingChildren = (returnFiber, currentFirstChild) => {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        let childToDelete = currentFirstChild;
	        while (childToDelete !== null) {
	            deleteChild(returnFiber, childToDelete);
	            childToDelete = childToDelete.sibling;
	        }
	    };
	    const reconcileSingleElement = (returnFiber, currentFiber, element) => {
	        const key = element.key;
	        // 只有key与type完全相同 才能复用
	        while (currentFiber !== null) {
	            // update
	            if (currentFiber.key === key) {
	                // key相同
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        // type相同
	                        const existing = useFiber(currentFiber, element.props);
	                        existing.return = returnFiber;
	                        // 当前节点可复用，剩下节点标记删除
	                        deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                        return existing;
	                    }
	                    // key相同，type不同 删掉所有旧的
	                    deleteRemainingChildren(returnFiber, currentFiber);
	                    break;
	                }
	                else {
	                    {
	                        console.warn('还未实现的react类型', element);
	                        break;
	                    }
	                }
	            }
	            else {
	                // key不同 删掉旧的
	                deleteChild(returnFiber, currentFiber);
	                currentFiber = currentFiber.sibling;
	            }
	        }
	        // 根据element创建fiber
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const reconcileSingleTextNode = (returnFiber, currentFiber, content) => {
	        while (currentFiber !== null) {
	            // update
	            if (currentFiber.tag === HostText) {
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                return existing;
	            }
	            deleteChild(returnFiber, currentFiber);
	            currentFiber = currentFiber.sibling;
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const placeSingleChild = (fiber) => {
	        // fiber.alternate为null，也就是current为null，也就是首屏渲染的情况
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    };
	    const reconcileChildrenArray = (returnFiber, currentFirstChild, newChild) => {
	        // 最后一个可复用fiber在current中的index
	        let lastPlacedIndex = 0;
	        // 创建的最后一个Fiber
	        let lastNewFiber = null;
	        // 创建的第一个Fiber
	        let firstNewFiber = null;
	        // 1. 将current保存在map中
	        const existingChildren = new Map();
	        let current = currentFirstChild;
	        while (current !== null) {
	            const keyToUse = current.key !== null ? current.key : current.index;
	            existingChildren.set(keyToUse, current);
	            current = current.sibling;
	        }
	        for (let i = 0; i < newChild.length; i++) {
	            // 2. 遍历newChild，寻找是否可复用
	            const after = newChild[i];
	            const newFiber = updateFromMap(returnFiber, existingChildren, i, after);
	            if (newFiber === null) {
	                continue;
	            }
	            // 3. 标记移动还是插入
	            newFiber.index = i;
	            newFiber.return = returnFiber;
	            if (lastNewFiber === null) {
	                lastNewFiber = newFiber;
	                firstNewFiber = newFiber;
	            }
	            else {
	                lastNewFiber.sibling = newFiber;
	                lastNewFiber = lastNewFiber.sibling;
	            }
	            if (!shouldTrackEffects) {
	                continue;
	            }
	            const current = newFiber.alternate;
	            if (current !== null) {
	                const oldIndex = current.index;
	                if (oldIndex < lastPlacedIndex) {
	                    newFiber.flags |= Placement;
	                    continue;
	                }
	                else {
	                    lastPlacedIndex = oldIndex;
	                }
	            }
	            else {
	                // mount
	                newFiber.flags |= Placement;
	            }
	        }
	        // 4. 将Map中剩下的标记为删除
	        existingChildren.forEach((fiber) => {
	            deleteChild(returnFiber, fiber);
	        });
	        return firstNewFiber;
	    };
	    const updateFromMap = (returnFiber, existingChildren, index, element) => {
	        const keyToUse = element.key !== null ? element.key : index;
	        const before = existingChildren.get(keyToUse);
	        if (typeof element === 'string' || typeof element === 'number') {
	            // HostText
	            if (before) {
	                if (before.tag === HostText) {
	                    existingChildren.delete(keyToUse);
	                    return useFiber(before, { content: element + '' });
	                }
	            }
	            return new FiberNode(HostText, { content: element + '' }, null);
	        }
	        // ReactElement
	        if (typeof element === 'object' && element !== null) {
	            switch (element.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    if (before) {
	                        if (before.type === element.type) {
	                            existingChildren.delete(keyToUse);
	                            return useFiber(before, element.props);
	                        }
	                    }
	                    return createFiberFromElement(element);
	            }
	            // TODO 数组类型
	            if (Array.isArray(element) && true) {
	                console.warn('还未实现数组类型的child');
	            }
	        }
	        return null;
	    };
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前fiber的类型
	        if (typeof newChild == 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	            // 多节点的情况 ul> li*3
	            if (Array.isArray(newChild)) {
	                return reconcileChildrenArray(returnFiber, currentFiber, newChild);
	            }
	        }
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        // 兜底删除
	        if (currentFiber !== null) {
	            deleteChild(returnFiber, currentFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	};
	const useFiber = (fiber, pendingProps) => {
	    const clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	};
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	let currentlyRenderingFiber = null;
	// 正在处理的Hook
	let workInProgressHook = null;
	let currentHook = null;
	const { currentDispatcher } = internals;
	const renderWithHooks = (wip) => {
	    // 赋值操作
	    currentlyRenderingFiber = wip;
	    // 重置 hooks链表
	    wip.memoizedState = null;
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        currentDispatcher.current = HooksDispatcherOnUpdate;
	    }
	    else {
	        // mount
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    // FC render
	    const children = Component(props);
	    // 重置操作
	    currentlyRenderingFiber = null;
	    workInProgressHook = null;
	    currentHook = null;
	    return children;
	};
	const mountState = (initialState) => {
	    // 找到当前useState对应的hook数据
	    const hook = mountWorkInProgressHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	};
	const updateState = () => {
	    // 找到当前useState对应的hook数据
	    const hook = updateWorkInProgressHook();
	    // 计算新的state的逻辑
	    const queue = hook.updateQueue;
	    const pending = queue.shared.pending;
	    if (pending !== null) {
	        const { memoizedState } = processUpdateQueue(hook.memoizedState, pending);
	        hook.memoizedState = memoizedState;
	    }
	    return [hook.memoizedState, queue.dispatch];
	};
	const HooksDispatcherOnMount = {
	    useState: mountState
	};
	const HooksDispatcherOnUpdate = {
	    useState: updateState
	};
	const dispatchSetState = (fiber, updateQueue, action) => {
	    const update = createUpdate(action);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber);
	};
	const mountWorkInProgressHook = () => {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        // mount时 第一个hook
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 后续的hook
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	};
	const updateWorkInProgressHook = () => {
	    // 交互阶段触发的更新
	    let nextCurrentHook;
	    if (currentHook === null) {
	        // 这是这个FC update时的第一个hook
	        const current = currentlyRenderingFiber?.alternate;
	        if (current !== null) {
	            nextCurrentHook = current?.memoizedState;
	        }
	        else {
	            // mount阶段才会出现的情况
	            nextCurrentHook = null;
	        }
	    }
	    else {
	        // 这个FC update时 后续的hook
	        nextCurrentHook = currentHook.next;
	    }
	    if (nextCurrentHook === null) {
	        // mount/update hook1 hook2 hook3
	        // update       hook1 hook2 hook3 hook4
	        throw new Error(`组件${currentlyRenderingFiber?.type}本次执行的Hook比上次执行的多`);
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memoizedState: currentHook.memoizedState,
	        updateQueue: currentHook.updateQueue,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        // mount时 第一个hook
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = newHook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 后续的hook
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	    // TODO render阶段触发的更新
	};

	// 递归中的递阶段
	const beginWork = (wip) => {
	    // 与React Element比较，返回子fiberNode
	    switch (wip.tag) {
	        // HostRoot的beginwork工作流程
	        // 1.计算状态的最新值
	        // 2.创建子fiberNode
	        case HostRoot:
	            return updateHostRoot(wip);
	        // HostComponent的beginwork工作流程
	        // 1.创建子fiberNode
	        case HostComponent:
	            return updateHostComponent(wip);
	        // HostText无子节点
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('beginwork未实现的类型');
	            }
	            break;
	    }
	    return null;
	};
	const updateFunctionComponent = (wip) => {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	};
	const updateHostRoot = (wip) => {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	};
	const updateHostComponent = (wip) => {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	};
	const reconcileChildren = (wip, children) => {
	    // 对比子current fiberNode与子reactElement生成子对应的wip fiberNode
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	};

	const elementPropsKey = '__props';
	const validEventTypeList = ['click'];
	const updateFiberProps = (node, props) => {
	    node[elementPropsKey] = props;
	};
	const initEvent = (container, eventType) => {
	    if (!validEventTypeList.includes(eventType)) {
	        console.warn('当前不支持', eventType, '事件');
	        return;
	    }
	    {
	        console.log('初始化事件', eventType);
	    }
	    container.addEventListener(eventType, (e) => {
	        dispatchEvent(container, eventType, e);
	    });
	};
	const createSyntheticEvent = (e) => {
	    const syntheticEvent = e;
	    syntheticEvent.__stopPropagation = false;
	    const originStopPropagation = e.stopPropagation;
	    syntheticEvent.stopPropagation = () => {
	        syntheticEvent.__stopPropagation = true;
	        if (originStopPropagation) {
	            originStopPropagation();
	        }
	    };
	    return syntheticEvent;
	};
	const dispatchEvent = (container, eventType, e) => {
	    const targetElement = e.target;
	    if (targetElement === null) {
	        console.warn('事件不存在target', e);
	        return;
	    }
	    // 1.收集沿途的事件
	    const { bubble, capture } = collectPaths(targetElement, container, eventType);
	    // 2.构造合成事件
	    const se = createSyntheticEvent(e);
	    // 3.遍历capture
	    triggerEventFlow(capture, se);
	    if (!se.__stopPropagation) {
	        // 4.遍历bubble
	        triggerEventFlow(bubble, se);
	    }
	};
	const triggerEventFlow = (paths, se) => {
	    for (let i = 0; i < paths.length; i++) {
	        const callback = paths[i];
	        callback.call(null, se);
	        if (se.__stopPropagation) {
	            break;
	        }
	    }
	};
	const getEventCallbackNameFromEventType = (eventType) => {
	    return {
	        click: ['onClickCapture', 'onClick'] // 捕获阶段 冒泡阶段
	    }[eventType];
	};
	const collectPaths = (targetElement, container, eventType) => {
	    const paths = {
	        capture: [],
	        bubble: []
	    };
	    while (targetElement && targetElement !== container) {
	        // 收集
	        const elementProps = targetElement[elementPropsKey];
	        if (elementProps) {
	            // click -> onClick onClickCapture
	            const callbackNameList = getEventCallbackNameFromEventType(eventType);
	            if (callbackNameList) {
	                callbackNameList.forEach((callbackName, i) => {
	                    const eventCallback = elementProps[callbackName];
	                    if (eventCallback) {
	                        if (i === 0) {
	                            //capture 注意这里是unshift
	                            paths.capture.unshift(eventCallback);
	                        }
	                        else {
	                            paths.bubble.push(eventCallback);
	                        }
	                    }
	                });
	            }
	        }
	        targetElement = targetElement.parentNode;
	    }
	    return paths;
	};

	const createInstance = (type, props) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    updateFiberProps(element, props);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;
	const commitUpdate = (fiber) => {
	    switch (fiber.tag) {
	        case HostText:
	            const text = fiber.memoizedProps.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        default:
	            {
	                console.warn('未实现的Update类型', fiber);
	            }
	            break;
	    }
	};
	const commitTextUpdate = (textInstance, content) => {
	    textInstance.textContent = content;
	};
	const removeChild = (child, container) => {
	    container.removeChild(child);
	};
	const insertChildToContainer = (child, container, before) => {
	    container.insertBefore(child, before);
	};

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 向上遍历
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    // flags Placement
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        // 将Placement移除
	        finishedWork.flags &= ~Placement;
	    }
	    // flags Update
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        finishedWork.flags &= ~Update;
	    }
	    // flags ChildDeletion
	    if ((flags & ChildDeletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((childToDelete) => {
	                commitDeletion(childToDelete);
	            });
	        }
	        finishedWork.flags &= ~ChildDeletion;
	    }
	};
	const commitDeletion = (childToDelete) => {
	    // 对于FC，需要处理useEffect unmout执行、解绑ref
	    // 对于HostComponent，需要解绑ref
	    // 对于子树的根HostComponent，需要移除DOM
	    // 递归子树
	    let rootHostNode = null;
	    commitNestedComponent(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                // TODO 解绑ref
	                return;
	            case HostText:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                return;
	            case FunctionComponent:
	                // TODO useEffect unmout
	                return;
	            default:
	                {
	                    console.warn('未处理的unmount类型', unmountFiber);
	                }
	                break;
	        }
	    });
	    // 移除rootHostComponent的DOM
	    if (rootHostNode !== null) {
	        const hostParent = getHostParent(childToDelete);
	        if (hostParent !== null) {
	            removeChild(rootHostNode.stateNode, hostParent);
	        }
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	};
	const commitNestedComponent = (root, onCommitUnmount) => {
	    // DFS
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === root) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === root) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // host sibling
	    const sibling = getHostSibling(finishedWork);
	    // finishedWork ~~ DOM append parent DOM
	    if (hostParent !== null) {
	        insertOrAppendPlacementNodeIntoContainer(finishedWork, hostParent, sibling);
	    }
	};
	const getHostSibling = (fiber) => {
	    let node = fiber;
	    findSibling: while (true) {
	        while (node.sibling === null) {
	            // 向上遍历
	            const parent = node.return;
	            if (parent === null ||
	                parent.tag === HostComponent ||
	                parent.tag === HostRoot) {
	                return null;
	            }
	            node = parent;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	        while (node.tag !== HostText && node.tag !== HostComponent) {
	            // 向下遍历
	            if ((node.flags & Placement) !== NoFlags) {
	                // 节点不稳定
	                continue findSibling;
	            }
	            if (node.child === null) {
	                continue findSibling;
	            }
	            else {
	                node.child.return = node;
	                node = node.child;
	            }
	        }
	        if ((node.flags & Placement) === NoFlags) {
	            return node.stateNode;
	        }
	    }
	};
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent?.tag;
	        // HostComponent HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent ');
	    }
	    return null;
	};
	const insertOrAppendPlacementNodeIntoContainer = (finishedWork, hostParent, before) => {
	    // 传进来的finishedWork不一定是Host类型的
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        if (before) {
	            insertChildToContainer(finishedWork.stateNode, hostParent, before);
	        }
	        else {
	            appendChildToContainer(hostParent, finishedWork.stateNode);
	        }
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        insertOrAppendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            insertOrAppendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	};

	const markUpdate = (fiber) => {
	    fiber.flags |= Update;
	};
	// 递归中的归阶段
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) {
	                // update
	                // 1.判断props是否变化
	                // 2.变化 Update flag
	                updateFiberProps(wip.stateNode, newProps);
	            }
	            else {
	                // mount
	                // 1. 构建DOM
	                const instance = createInstance(wip.type, newProps);
	                // 2. 将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                // update
	                const oldText = current.memoizedProps.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                // 1. 构建DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的comoleteWork情况', wip);
	            }
	            break;
	    }
	};
	const appendAllChildren = (parent, wip) => {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        // 兄弟节点
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const bubbleProperties = (wip) => {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	};

	/**
	 * 对于同一个节点，比较其ReactElement与fiberNode，生成子fiberNode。
	 * 并根据比较的结果生成不同标记（插入、删除、移动......），对应不同宿主环境API的执行。
	 *
	 * 当所有ReactElement比较完后，会生成一棵fiberNode树，一共会存在两棵fiberNode树：
	 *  current：与视图中真实UI对应的fiberNode树
	 *  workInProgress：触发更新后，正在reconciler中计算的fiberNode树
	 *
	 * 以DFS（深度优先遍历）的顺序遍历ReactElement
	 */
	let workInProgress = null;
	const prepareFreshStack = (root) => {
	    workInProgress = createWorkInProgress(root.current, {});
	};
	const scheduleUpdateOnFiber = (fiber) => {
	    // fiberRootNode
	    const root = markUpdataFromFiberToRoot(fiber);
	    renderRoot(root);
	};
	const markUpdataFromFiberToRoot = (fiber) => {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	};
	const renderRoot = (root) => {
	    // 初始化
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop发生错误', e);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // 根据wip fiberNode树与树中的flags 执行具体的DOM操作
	    commitRoot(root);
	};
	const commitRoot = (root) => {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个子阶段需要执行的操作
	    // root flags
	    // root subtreeFlags
	    const subtreeHasEffevt = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffevt || rootHasEffect) {
	        // TODO 1.beforeMutation
	        // 2.mutation  Placement
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // TODO 3.layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	};
	const workLoop = () => {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	};
	const performUnitOfWork = (fiber) => {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	};
	const completeUnitOfWork = (fiber) => {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const siblind = node.sibling;
	        if (siblind !== null) {
	            workInProgress = siblind;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	};

	// 创建根节点 fiberRootNode
	const createContainer = (container) => {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	};
	const updateContainer = (element, root) => {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	};

	// ReactDOM.createRoot(root).render(<App />);
	const createRoot = (container) => {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            initEvent(container, 'click');
	            return updateContainer(element, root);
	        }
	    };
	};

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
